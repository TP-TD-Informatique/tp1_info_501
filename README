# TP1 info501
# Kevin Traini

---

## Question 1

1. Fonction `simplify_formula` :

```python
simplified_F = [] # La formule simplifiée que l'on va retourner
for cl in F: # Pour chaque clause de la formule
    simplified_cl = [] # La clause simplifiée à rajouter
    if not lit in cl:
        for v in cl: # Pour chaque variable de la clause
            if v != -lit: # Si la clause est une variable et n'est pas fausse, par exemple si lit = 2 et v ne doit pas valoir -2
                simplified_cl.append(v) # on rajoute cette variable à la clause
        simplified_F.append(simplified_cl) # On la rajoute à la formule

return simplified_F
```

2. Sur la formule `(x1 ∨ ¬x2 ∨ x3) ∧ (¬x1 ∨ ¬x3 ∨ x4) ∧ (x2 ∨ ¬x4)` : Le fichier .sat

```
x1 ~x2 x3
~x1 ~x3 x4
x2 ~x4
```
Le résultat
```shell
$ ./naivesat-Traini.py test1.sat --test 1
simplification avec 1
avant : [[1, -2, 3], [-1, -3, 4], [2, -4]]
après : [[-3, 4], [2, -4]]
```

---

## Question 2

1. La formule `(a ∨ ¬b) ∧ (¬b ∨ ¬c) ∧ (¬a ∨ ¬c) ∧ (¬a ∨ ¬b ∨ c) ∧ (a ∨ b ∨ ¬c)` est satisfiable pour les valeurs `a ~b ~c` soit `a = 1, b = c = 0`

2. Pour trouver d'autres solutions, on empèche la première trouvée en ajoutant 1 clause `¬a ∨ b ∨ c`. Dans ce cas présent la formule est satisfiable pour la solution `~a ~b ~c` soit `a = b = c = 0`

---

## Question 3

1. En partant de la fonction `solve`, on peut écrire la fonction `all_solutions` qui affiche toutes les solutions :

```python
if not F: # Si F est vide, alors F est satisfiable pour la solution sol
    print_sol(sol) # On affiche la solution
    return 1 # On renvoie 1 pour le compteur de solution

if [] in F: # Si F contient la clause vide, alors F n'est pas satisfiable
    return 0 # On renvoie 0 pour le compteur de solution

lit = F[0][0] # On récupère le premier littéral de la première clause
# On additionne le nombre de solution pour les 2 valeurs du littéral
return all_solutions(simplify_formula(F, lit), sol+[lit]) + all_solutions(simplify_formula(F, -lit), sol+[-lit])
```

2. Je renvoie le nombre de solution trouvé en additionnant les résultat renvoyé par les 2 essais, en renvoyant 1 quand satisfiable 0 sinon. Pour la formule `(x1 ∨ ¬x2 ∨ x3) ∧ (¬x1 ∨ ¬x3 ∨ x4) ∧ (x2 ∨ ¬x4)` j'ai :

```
x1 ~x3 x2
x1 ~x3 ~x2 ~x4
x1 x3 x4 x2
~x1 ~x2 ~x4
~x1 x2 x3
SATISFIABLE: 5 solution(s) found
```


---

## Question 4 (BONUS)

En testant plusieurs fois la satisfiabilité de la formule `(x1 ∨ ¬x2 ∨ x3) ∧ (¬x1 ∨ ¬x3 ∨ x4) ∧ (x2 ∨ ¬x4)` avec l'option `-r`, on remarque que la solution n'est pas la même. On peut expliquer ça du fait que l'algorithme commence par le début de la formule, donc le premier littéral qu'il rencontre détermine le reste de la solution qu'il va trouver.


---

## Question 6

1. Dans le fichier `cartes-Traini-Martins-Gomes.sat`, on ajoute les contraintes pour les 3 indices, ensuite on ajoute une contrainte pour dire qu'il y a au moins une carte de chaque, une autre contrainte pour dire qu'il y a au plus une carte de chaque. Ces 2 contraintes font qu'il y a une carte de chaque. On ajoute une dernière contrainte qui dit qu'il ne peut y avoir qu'une carte par emplacement.
Le résultat est l'as de pique en 1, l'as de carreau en 2, l'as de trefle en 3 et l'as de coeur en 4.


---

## Question 7

1. L'implication `a ⇒ b` se transforme en `¬a ∨ b`, donc le corps de la fonction implies(a,b) est :
```python
check(a)
check(b)
for i in range(1, 6):
    print(f"~E_{i}_{a} E_{i}_{b}")
```
La fonction constraints_1() a pour corps
```python
for L in things:
    for a in L:
        print(f"E_1_{a} E_2_{a} E_3_{a} E_4_{a} E_5_{a}")
```

2. naivesat nous renvoie comme solution : `~E_1_musicien ~E_2_musicien ~E_3_musicien ~E_4_musicien E_5_musicien E_5_tortue E_1_jaune E_1_jazz ~E_2_jaune ~E_3_jaune ~E_4_jaune ~E_5_jaune ~E_1_hardrock ~E_2_hardrock E_3_hardrock E_3_chat ~E_4_hardrock ~E_5_hardrock ~E_1_bois ~E_2_bois ~E_3_bois E_4_bois E_5_blanche ~E_1_chercheur ~E_2_chercheur E_3_chercheur E_3_brique ~E_4_chercheur ~E_5_chercheur E_1_footballeur E_2_immeuble ~E_2_footballeur ~E_4_footballeur ~E_5_footballeur ~E_1_classique E_2_classique E_1_biere ~E_3_classique ~E_4_classique ~E_5_classique ~E_1_hiphop ~E_2_hiphop ~E_3_hiphop ~E_4_hiphop E_5_hiphop E_5_the E_3_soda E_1_poisson ~E_1_boulanger ~E_2_boulanger ~E_3_boulanger E_4_boulanger E_4_chanson ~E_5_boulanger ~E_1_hamster ~E_3_hamster ~E_4_hamster ~E_5_hamster ~E_1_architecte E_2_architecte E_2_eau ~E_3_architecte ~E_4_architecte ~E_5_architecte E_4_whisky ~E_5_bois E_2_hamster ~E_1_zebre ~E_2_zebre ~E_3_zebre E_4_zebre ~E_1_blanche ~E_2_blanche ~E_3_blanche ~E_4_blanche ~E_1_brique ~E_2_brique ~E_4_brique ~E_5_brique ~E_1_immeuble ~E_3_immeuble ~E_4_immeuble ~E_5_immeuble ~E_1_chat ~E_2_chat ~E_4_chat ~E_5_chat ~E_2_poisson ~E_3_poisson ~E_4_poisson ~E_5_poisson ~E_1_tortue ~E_2_tortue ~E_3_tortue ~E_4_tortue ~E_5_zebre ~E_3_footballeur ~E_2_biere ~E_3_biere ~E_4_biere ~E_5_biere ~E_1_eau ~E_3_eau ~E_4_eau ~E_5_eau ~E_1_soda ~E_2_soda ~E_4_soda ~E_5_soda ~E_1_the ~E_2_the ~E_3_the ~E_4_the ~E_1_whisky ~E_2_whisky ~E_3_whisky ~E_5_whisky ~E_1_chanson ~E_2_chanson ~E_3_chanson ~E_5_chanson ~E_2_jazz ~E_3_jazz ~E_4_jazz ~E_5_jazz`

3. On en conclut que c'est le boulanger dans la maison 4 qui à le zèbre.


---

## Question 9

On peut dire que `s ⇔ (a ⊕ b ⊕ c)` est vraie car toutes les solutions envoyé par le sat-solver indiquent l'équivalence


---

## Question 10

Le corps de la fonction `xor3(r, x, y, z)` reprend le contenu du fichier `xor3.sat` en remplaçant les littéraux par '{x|y|z|r}' :
```python
print(f"~{x} ~{y} ~{z} {r}")
print(f"~{x} ~{y} {z} ~{r}")
print(f"~{x} {y} ~{z} ~{r}")
print(f"{x} ~{y} ~{z} ~{r}")
print(f"{x} {y} {z} ~{r}")
print(f"{x} {y} ~{z} {r}")
print(f"{x} ~{y} {z} {r}")
print(f"~{x} {y} {z} {r}")
```
